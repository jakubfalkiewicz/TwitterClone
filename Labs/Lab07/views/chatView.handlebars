<html>
  <head>
    <title>Socket.IO chat</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system,
      BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position:
      fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem;
      box-sizing: border-box; backdrop-filter: blur(10px); } #input { border:
      none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem;
      } #input:focus { outline: none; } #form > button { background: #333;
      border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px;
      outline: none; color: #fff; } #messages { list-style-type: none; margin:
      0; padding: 0; } #messages > li { padding: 0.5rem 1rem; } #messages >
      li:nth-child(odd) { background: #efefef; }
    </style>
  </head>
  <body>
    <input type="hidden" id="theUser" value={{user._id}} />
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" /><button>Send</button>
    </form>
  </body>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const roomId = document.getElementById("theUser").value; const logged =
    sessionStorage.getItem("loggedId"); var socket = io();
    socket.emit("get-room-owner-id", roomId, logged); socket.on("receive-id",
    function (id) { sessionStorage.setItem(`${roomId}`, id);
    console.log(`Received chat owner ID: ${id}`); console.log(socket.id); }); if
    (logged) { socket.on("connect", function (data) {
    socket.emit("storeClientInfo", { customId: logged, }); }); } var messages =
    document.getElementById("messages"); var form =
    document.getElementById("form"); var input =
    document.getElementById("input"); form.addEventListener("submit", function
    (e) { e.preventDefault(); const room = sessionStorage.getItem(`${roomId}`);
    console.log(room); if (!logged) { alert("Please log in first");
    window.location.href = "http://localhost:3000/"; } if (input.value &&
    logged) { console.log("Client-sending-chat-message");
    socket.emit("chat-message", input.value, room, logged); input.value = ""; }
    }); socket.on("receive-message", (msg, sender) => {
    console.log("Client-received-chat-message"); var item =
    document.createElement("li"); async function getUsers() { await
    axios.get("http://localhost:3000/users/").then((res) => { const senderLogin
    = res.data.filter((el) => el._id == sender)[0]; console.log(senderLogin);
    item.textContent = `${senderLogin.login}: ${msg}`;
    messages.appendChild(item); }); } getUsers(); });

  </script>
</html>